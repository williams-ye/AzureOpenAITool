Object subclass: #Address	instanceVariableNames: 'street city state zip'	classVariableNames: ''	poolDictionaries: ''	category: 'Employees-Test'!!Address methodsFor: 'initialize-release' stamp: 'mtm 4/30/2007 04:20'!street: streetString city: citySymbol state: stateSymbol zip: zipString	street := streetString.	city := citySymbol.	state := stateSymbol.	zip := zipString.! !!Address methodsFor: 'printing' stamp: 'mtm 4/30/2007 04:25'!printOn: aStream	"Puts contents of this object onto the input stream when this object is output via. Transcript show:"	aStream nextPutAll: ('{1}, {2}, {3} {4}' format: {street. city. state. zip})! !Object subclass: #DeptClassRules	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Employees-Test'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DeptClassRules class	instanceVariableNames: 'deptClassAssociations'!!DeptClassRules class methodsFor: 'class initialization' stamp: 'mtm 4/30/2007 03:50'!initialize	"comment stating purpose of message"	deptClassAssociations := Dictionary new! !!DeptClassRules class methodsFor: 'adding' stamp: 'mtm 4/30/2007 05:55'!addClasses: classSymbolArray toDepts: deptSymbolArray	"Associates a series of employee classes with a series of departments."	deptSymbolArray do: [:dept | deptClassAssociations at: dept put: classSymbolArray]! !!DeptClassRules class methodsFor: 'adding' stamp: 'mtm 4/30/2007 03:50'!addClass: classSymbol toDept: deptSymbol	"Associates an employee class with a department"	deptClassAssociations at: deptSymbol put: {classSymbol}! !!DeptClassRules class methodsFor: 'validation' stamp: 'mtm 4/30/2007 03:53'!validateClass: classSymbol forDept: deptSymbol	"Makes sure department is associated with a class within the rules."	^(deptClassAssociations at: deptSymbol) includes: classSymbol! !Object subclass: #Employee	instanceVariableNames: 'name address workPhone homePhone salary dept empClass'	classVariableNames: ''	poolDictionaries: ''	category: 'Employees-Test'!!Employee methodsFor: 'initialize-release' stamp: 'mtm 5/14/2007 01:59'!name: nameString homeAddress: addressObj workPhone: workPhoneString homePhone: homePhoneString salary: aNumber dept: deptSymbol empClass: classSymbol 	name := nameString.	address := addressObj.	workPhone := workPhoneString.	homePhone := homePhoneString.	salary := aNumber.	(Employee depts includes: deptSymbol)		ifFalse: [self error: deptSymbol, ' is not a recognized department.'].	(Employee empClasses includes: classSymbol)		ifFalse: [self error: classSymbol, ' is not a recognized employment class.'].	(DeptClassRules validateClass: classSymbol forDept: deptSymbol) 		ifTrue: [dept := deptSymbol.				empClass := classSymbol]		ifFalse: [self error: ('{1} cannot be placed in department {2}, because the employee class for the record is {3}.'								format: { nameString. deptSymbol. classSymbol })]! !!Employee methodsFor: 'printing' stamp: 'mtm 4/30/2007 05:59'!printUsingEmploymentClass: classSymbolOfViewer 	"Outputs employee data according to the employment class of the viewer"	Transcript show: 'Name: ', name; cr.	(classSymbolOfViewer = #MidLevel or: [classSymbolOfViewer = #Executive]) 		ifTrue: [Transcript show: 'Address: '; show: address; cr].	Transcript show: 'Work Phone: ', workPhone; cr.	(classSymbolOfViewer = #MidLevel or: [classSymbolOfViewer = #Executive]) 		ifTrue: [Transcript show: 'Home Phone: ', homePhone; cr].	classSymbolOfViewer = #Executive 		ifTrue: [Transcript show: 'Salary: ', salary asString; cr].	Transcript show: 'Department: ', dept; cr.	Transcript show: 'Class: ', empClass; cr; cr! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Employee class	instanceVariableNames: 'depts empClasses'!!Employee class methodsFor: 'class initialization' stamp: 'mtm 4/30/2007 03:55'!initialize	"Set up symbols and their rules."	depts := #(#Manufacturing #Sales #Accounting #Board).	empClasses := #(#Employee #MidLevel #Executive).	DeptClassRules initialize.	DeptClassRules addClasses: #(#Employee #MidLevel) toDepts: #(Manufacturing #Sales #Accounting).	DeptClassRules addClass: #Executive toDept: #Board! !!Employee class methodsFor: 'accessing' stamp: 'mtm 4/30/2007 05:19'!depts	^depts! !!Employee class methodsFor: 'accessing' stamp: 'mtm 4/30/2007 05:20'!empClasses	^empClasses! !DeptClassRules initialize!Employee initialize!